majors <- c("Economics", "Computer Science", "Biology", "Economics", "Mathematics")
# Creating a factor from the majors vector
major_factor <- factor(majors)
# Analyzing the distribution of majors
major_distribution <- table(major_factor) # the table() command returns a frequency table (more on this next week)
print(major_distribution)
# If statement
x <- 10
y <- 20
if (x > y) {
print("x is greater than y")
} else {
print("x is not greater than y")
}
# Economics example: Buying decision
price <- 15
budget <- 20
if (price <= budget) {
print("Affordable")
} else {
print("Too expensive")
}
grade <- 75
if (grade >= 90) {
print("A")
} else if (grade >= 80) {
print("B")
} else if (grade >= 70) {
print("C")
} else {
print("D or below")
}
grade <- 85
if (grade >= 90) {
print("A")
} else if (grade >= 80) {
print("B")
} else if (grade >= 70) {
print("C")
} else {
print("D or below")
}
# Economics example: Income Tax Bracket
income <- 60000
if (income <= 50000) {
tax <- income * 0.10
} else if (income <= 100000) {
tax <- 50000 * 0.10 + (income - 50000) * 0.20
} else {
tax <- 50000 * 0.10 + 50000 * 0.20 + (income - 100000) * 0.30
}
print(paste("Income Tax:", tax))
# Logical operators
temperature <- 25
is_raining <- FALSE
if (temperature > 20 & !is_raining) {
print("Great day for a picnic!")
} else {
print("Maybe another day...")
}
temperature <- 25
is_raining <- TRUE
if (temperature > 20 & !is_raining) {
print("Great day for a picnic!")
} else {
print("Maybe another day...")
}
# Exercise 5
base_cost_per_night <- 100
stay_duration <- 15
if (stay_duration > 14) {
discount_percent <- 15
} else if (stay_duration > 7) {
discount_percent <- 10
} else {
discount_percent <- 0
}
total_cost <- base_cost_per_night * stay_duration * (1 - discount_percent / 100)
print(paste("Total cost of the hotel stay: $", total_cost))
# Exercise 5
base_cost_per_night <- 100
stay_duration <- 8
if (stay_duration > 14) {
discount_percent <- 15
} else if (stay_duration > 7) {
discount_percent <- 10
} else {
discount_percent <- 0
}
total_cost <- base_cost_per_night * stay_duration * (1 - discount_percent / 100)
print(paste("Total cost of the hotel stay: $", total_cost))
# Create a 2x3 matrix
mat <- matrix(c(1, 2, 3, 4, 5, 6),
nrow = 2, ncol = 3) # nrow * ncol = # of observations
print(mat)
# Create a 2x3 matrix
mat <- matrix(c(1, 2, 3, 4, 5, 6),
nrow = 3, ncol = 2) # nrow * ncol = # of observations
print(mat)
# Create a 2x3 matrix
mat <- matrix(c(1, 2, 3, 4, 5, 6),
nrow = 3, ncol = 3) # nrow * ncol = # of observations
print(mat)
# Create a 2x3 matrix
mat <- matrix(c(1, 2, 3, 4, 5, 6),
nrow = 3, ncol = 3) # nrow * ncol = # of observations
# Create a matrix with sales data and named dimensions
sales_matrix <- matrix(c(100, 150, 200, 80, 120, 160),
nrow = 3, byrow = TRUE,
dimnames = list(c("Month1", "Month2", "Month3"),
c("ProductA", "ProductB")))
sales_matrix
price_matrix <- matrix(c(10,15,20,5,8,12),
nrow=3, byrow=T,
dimnames = list(c("1", "2", "3"),
c("Product A", "Product B")))
price_matrix
# matrix additiona
sales_matrix + price_matrix
price_matrix
# matrix additiona
sales_matrix + price_matrix
total_revenue <- sales_matrix * price_matrix
total_revenue
total_revenue <- sales_matrix * price_matrix; total_revenue
price_matrix <- matrix(c(10,15,20,5,8,12),
ncol=2, byrow=F,
dimnames = list(c("1", "2", "3"),
c("Product A", "Product B")))
price_matrix
unemployment_rates <- c(5.2, 5.5, 5.7, 5.9, 5)
# Create a data frame for unemployment rates
quarters <- c("Q1", "Q2", "Q3", "Q4")
unemployment_rates <- c(5.2, 5.5, 5.7, 5.9, 5)
unemployment_data <- data.frame(Quarter = quarters,
Rate = unemployment_rates)
# Create a data frame for unemployment rates
quarters <- c("Q1", "Q2", "Q3", "Q4")
unemployment_rates <- c(5.2, 5.5, 5.7, 5.9)
unemployment_data <- data.frame(Quarter = quarters,
Rate = unemployment_rates)
unemployment_data
# Access a specific element in the sales_matrix
sales_productA_month2 <- sales_matrix[2, "ProductA"]
sales_productA_month2
unemployment_data[3, "Rate"]
unemployment_data[, "Rate"]
unemployment_data[, "Rate"][3]
# Creating a frequency table
data <- c("A", "B", "A", "C", "B", "A")
freq_table <- table(data)
print(freq_table)
grades = c("A", "B", "B", "C", "A", "A", "B")
table(grades)
exam_scores <- c(85, 92, 78, 90, 85, 88, 78, 92, 92, 90)
# Create a discrete frequency table
freq_table_discrete <- table(exam_scores)
print(freq_table_discrete)
hist(exam_scores, main = "Histogram of Exam Scores",
xlab = "Exam Scores", ylab = "Frequency",
col = "red", border = "black")
fruit_weights <- c(120, 150, 140, 170, 180, 135, 160, 150, 175, 130)
# Choose the number of bins (intervals) for the histogram
num_bins <- 4
# Create a histogram for the fruit weights
hist(fruit_weights, breaks = num_bins,
main = "Histogram of Fruit Weights",
xlab = "Fruit Weights (grams)", ylab = "Frequency",
col = "salmon", border = "black")
# Dataset of fruit weights (in grams)
fruit_weights <- c(120, 150, 140, 170, 180, 135, 160, 150, 175, 130)
# Choose the number of bins (intervals) for the histogram
num_bins <- 4
# Create a histogram for the fruit weights
hist(fruit_weights, breaks = num_bins,
main = "Histogram of Fruit Weights",
xlab = "Fruit Weights (grams)", ylab = "Frequency",
col = "salmon", border = "black")
# Calculate class width for the continuous frequency distribution
data_range <- max(fruit_weights) - min(fruit_weights)
class_width <- data_range / num_bins
cat("Class Width:", class_width, "grams\n")
# Calculate frequency table for continuous distribution
freq_table_continuous <- cut(fruit_weights, breaks = num_bins,
right = TRUE, include.lowest = TRUE)
print(table(freq_table_continuous))
# Dataset of fruit weights (in grams)
fruit_weights <- c(120, 150, 140, 170, 180, 135, 160, 150, 175, 130)
# Choose the number of bins (intervals) for the histogram
num_bins <- 8
# Create a histogram for the fruit weights
hist(fruit_weights, breaks = num_bins,
main = "Histogram of Fruit Weights",
xlab = "Fruit Weights (grams)", ylab = "Frequency",
col = "salmon", border = "black")
# Calculate class width for the continuous frequency distribution
data_range <- max(fruit_weights) - min(fruit_weights)
class_width <- data_range / num_bins
cat("Class Width:", class_width, "grams\n")
# Calculate frequency table for continuous distribution
freq_table_continuous <- cut(fruit_weights, breaks = num_bins,
right = TRUE, include.lowest = TRUE)
print(table(freq_table_continuous))
# Calculate mean and median
income <- c(40000, 45000, 52000, 60000, 67000, 140000)
mean_income <- mean(income)
median_income <- median(income)
print(paste("Mean Income:", mean_income))
print(paste("Median Income:", median_income))
# Calculate quartiles
quartiles <- quantile(income, probs = c(0.25, 0.5, 0.75))
print(paste("Income Quartiles:", quartiles)) # note vectorization
# Calculate variance and standard deviation
var_income <- var(income)
sd_income <- sd(income)
print(paste("Income variance:", var_income))
print(paste("Income standard deviation:", sd_income))
# Calculate coefficient of variation
cv_income <- (sd_income / mean_income) * 100
print(paste("Income CV:", cv_income))
# alternative way of setting row and column names
sales_matrix <- matrix(c(100, 150, 200, 80, 120, 160),
nrow = 3, byrow = TRUE)
sales_matrix
rownames(sales_matrix) <- c("1", "2", "3")
sales_matrix
colnames(sales_matrix) <- c("ProdA", "ProdB")
sales_matrix
?cut
# Create a 2x3 matrix
mat <- matrix(c(1, 2, 3, 4, 5, 6),
nrow = 3, ncol = 2) # nrow * ncol = # of observations
print(mat)
# Create a 2x3 matrix
mat <- matrix(c(1, 2, 3, 4, 5, 6),
nrow = 2, ncol = 2) # nrow * ncol = # of observations
# Create a 2x3 matrix
mat <- matrix(c(1, 2, 3, 4, 5, 6),
nrow = 2, ncol = 3) # nrow * ncol = # of observations
print(mat)
# Create a matrix with sales data and named dimensions
sales_matrix <- matrix(c(100, 150, 200, 80, 120, 160),
nrow = 3, byrow = TRUE,
dimnames = list(c("Month1", "Month2"),
c("ProductA", "ProductB", "ProductC")))
sales_matrix
# Create a matrix with sales data and named dimensions
sales_matrix <- matrix(c(100, 150, 200, 80, 120, 160),
nrow = 3, byrow = TRUE,
dimnames = list(c("Month1", "Month2"),
c("ProductA", "ProductB", "ProductC")))
# Create a matrix with sales data and named dimensions
sales_matrix <- matrix(c(100, 150, 200, 80, 120, 160),
nrow = 2, byrow = TRUE,
dimnames = list(c("Month1", "Month2"),
c("ProductA", "ProductB", "ProductC")))
sales_matrix
# alternative way of setting row and column names
sales_matrix <- matrix(c(100, 150, 200, 80, 120, 160),
nrow = 3, byrow = TRUE)
sales_matrix
rownames(sales_matrix)
rownames(sales_matrix) <- c("1", "2", "3")
sales_matrix
colnames(sales_matrix) <- c("ProdA", "ProdB")
sales_matrix
price_matrix <- matrix(c(10,15,20,5,8,12),
ncol=2, byrow=F,
dimnames = list(c("1", "2", "3"),
c("Product A", "Product B")))
# matrix addition
sales_matrix + price_matrix
total_revenue <- sales_matrix * price_matrix
total_revenue
# Create a data frame for unemployment rates
quarters <- c("Q1", "Q2", "Q3", "Q4")
unemployment_rates <- c(5.2, 5.5, 5.7, 5.9)
unemployment_data <- data.frame(Quarter = quarters,
Rate = unemployment_rates)
unemployment_data
# Access a specific element in the sales_matrix
sales_productA_month2 <- sales_matrix[2, "ProductA"]
sales_matrix
# Access a specific element in the sales_matrix
sales_productA_month2 <- sales_matrix[2, "ProdA"]
sales_productA_month2
unemployment_data[3, "Rate"]
nemployment_data[, "Rate"]
unemployment_data[, "Rate"]
unemployment_data[, "Rate"][3]
# Creating a frequency table
data <- c("A", "B", "A", "C", "B", "A")
freq_table <- table(data)
print(freq_table)
grades = c("A", "B", "B", "C", "A", "A", "B")
table(grades)
# Dataset of exam scores
exam_scores <- c(85, 92, 78, 90, 85, 88, 78, 92, 92, 90)
# Create a discrete frequency table
freq_table_discrete <- table(exam_scores)
print(freq_table_discrete)
# Create a histogram for the exam scores
hist(exam_scores, main = "Histogram of Exam Scores",
xlab = "Exam Scores", ylab = "Frequency",
col = "red", border = "black")
# Create a histogram for the exam scores
hist(exam_scores, main = "Histogram of Exam Scores",
xlab = "Exam Scores", ylab = "Frequency",
col = "salmon", border = "black")
# Dataset of fruit weights (in grams)
fruit_weights <- c(120, 150, 140, 170, 180, 135, 160, 150, 175, 130)
# Choose the number of bins (intervals) for the histogram
num_bins <- 4
# Create a histogram for the fruit weights
hist(fruit_weights, breaks = num_bins,
main = "Histogram of Fruit Weights",
xlab = "Fruit Weights (grams)", ylab = "Frequency",
col = "salmon", border = "black")
# Dataset of fruit weights (in grams)
fruit_weights <- c(120, 150, 140, 170, 180, 135, 160, 150, 175, 130)
# Choose the number of bins (intervals) for the histogram
num_bins <- 8
# Create a histogram for the fruit weights
hist(fruit_weights, breaks = num_bins,
main = "Histogram of Fruit Weights",
xlab = "Fruit Weights (grams)", ylab = "Frequency",
col = "salmon", border = "black")
# Dataset of fruit weights (in grams)
fruit_weights <- c(120, 150, 140, 170, 180, 135, 160, 150, 175, 130)
# Choose the number of bins (intervals) for the histogram
num_bins <- 500
# Create a histogram for the fruit weights
hist(fruit_weights, breaks = num_bins,
main = "Histogram of Fruit Weights",
xlab = "Fruit Weights (grams)", ylab = "Frequency",
col = "salmon", border = "black")
# Dataset of fruit weights (in grams)
fruit_weights <- c(120, 150, 140, 170, 180, 135, 160, 150, 175, 130)
# Choose the number of bins (intervals) for the histogram
num_bins <- 5
# Create a histogram for the fruit weights
hist(fruit_weights, breaks = num_bins,
main = "Histogram of Fruit Weights",
xlab = "Fruit Weights (grams)", ylab = "Frequency",
col = "salmon", border = "black")
# Calculate class width for the continuous frequency distribution
data_range <- max(fruit_weights) - min(fruit_weights)
class_width <- data_range / num_bins
cat("Class Width:", class_width, "grams\n")
# Calculate frequency table for continuous distribution
freq_table_continuous <- cut(fruit_weights, breaks = num_bins,
right = TRUE, include.lowest = TRUE)
print(table(freq_table_continuous))
?cut
# Calculate mean and median
income <- c(40000, 45000, 52000, 60000, 67000, 140000)
mean_income <- mean(income)
median_income <- median(income)
# Calculate mean and median
income <- c(40000, 45000, 52000, 60000, 67000, 140000)
mean_income <- mean(income)
median_income <- median(income)
print(paste("Mean Income:", mean_income))
print(paste("Median Income:", median_income))
# Calculate mean and median
income <- c(40000, 45000, 52000, 60000, 67000)
mean_income <- mean(income)
median_income <- median(income)
print(paste("Mean Income:", mean_income))
print(paste("Median Income:", median_income))
# Calculate mean and median
income <- c(40000, 45000, 52000, 60000, 67000, 150000)
# Calculate mean and median
income <- c(40000, 45000, 52000, 60000, 67000, 150000)
mean_income <- mean(income)
median_income <- median(income)
print(paste("Mean Income:", mean_income))
print(paste("Median Income:", median_income))
# Calculate quartiles
quartiles <- quantile(income, probs = c(0.25, 0.5, 0.75))
print(paste("Income Quartiles:", quartiles)) # note vectorization
table(income)
sort(table(income), decreasing = TRUE)
# Calculate mean and median
income <- c(40000, 40000, 45000, 52000, 60000, 67000, 150000)
sort(table(income), decreasing = TRUE)
sort(table(income), decreasing = TRUE)[1]
names(sort(table(income), decreasing = TRUE)[1])
as.numeric(names(sort(table(income), decreasing = TRUE)[1]))
print(paste("Income mode:", income_mode))
table(income)
sort(table(income), decreasing = TRUE)
# Calculate range
data_range <- max(income) - min(income)
data_range
range(income)
data_range
range(income)
# Calculate range
data_range <- max(income) - min(income)
data_range
# Calculate variance and standard deviation
var_income <- var(income)
sd_income <- sd(income)
print(paste("Income variance:", var_income))
print(paste("Income standard deviation:", sd_income))
income <- c(income, NA)
income
var(income)
var(income, na.rm=T)
# Calculate variance and standard deviation
var_income <- var(income, na.rm=T)
sd_income <- sd(income, na.rm=T)
print(paste("Income variance:", var_income))
print(paste("Income standard deviation:", sd_income))
# Calculate coefficient of variation
cv_income <- (sd_income / mean_income) * 100
print(paste("Income CV:", cv_income))
# Calculate skewness and kurtosis
skewness_income <- skewness(income)
# Calculate skewness and kurtosis
skewness_income <- skewness(income)
kurtosis_income <- kurtosis(income)
#install.packages("e1071")
library(e1071)  # Make sure e1071 package is installed
# Calculate skewness and kurtosis
skewness_income <- skewness(income)
kurtosis_income <- kurtosis(income)
print(paste("Income skewness:", skewness_income))
# Calculate skewness and kurtosis
skewness_income <- skewness(income)
kurtosis_income <- kurtosis(income)
print(paste("Income skewness:", skewness_income))
print(paste("Income kurtosis", kurtosis_income))
# Calculate skewness and kurtosis
skewness_income <- skewness(income, na.rm = T)
kurtosis_income <- kurtosis(income, na.rm=T)
print(paste("Income skewness:", skewness_income))
print(paste("Income kurtosis", kurtosis_income))
rnorm(1000, mean = 50, sd = 10)
rnorm(1000, mean = 50, sd = 10)
# Create a dataset with a normal distribution
set.seed(123)  # Setting seed for reproducibility
data <- rnorm(1000, mean = 50, sd = 10)  # Mean = 50, Standard Deviation = 10
data
data <- rnorm(1000, mean = 50, sd = 10)  # Mean = 50, Standard Deviation = 10
data
set.seed(123)  # Setting seed for reproducibility
data <- rnorm(1000, mean = 50, sd = 10)
data
data
set.seed(123)  # Setting seed for reproducibility
data <- rnorm(1000, mean = 50, sd = 10)
data <- rnorm(1000, mean = 50, sd = 10)  # Mean = 50, Standard Deviation = 10
data
set.seed(123)  # Setting seed for reproducibility
data <- rnorm(1000, mean = 50, sd = 10)  # Mean = 50, Standard Deviation = 10
# Calculate quartiles
q1 <- quantile(data, 0.25)
q3 <- quantile(data, 0.75)
# Calculate mode
mode <- as.numeric(names(sort(table(data), decreasing = TRUE)[1]))
# Calculate range
range_data <- range(data)
# Calculate variance
variance <- var(data)
# Calculate mean and median for different standard deviations
std_dev_values <- c(5, 10, 15, 50, 100)
result <- data.frame(StandardDeviation = std_dev_values)
result
results$StandardDeviation
result$StandardDeviation
result
result["Mean"] <- sapply(std_dev_values, function(sd_value) {
data <- rnorm(1000, mean = 50, sd = sd_value)
return(mean(data))
})
result$Median <- sapply(std_dev_values, function(sd_value) {
data <- rnorm(1000, mean = 50, sd = sd_value)
return(median(data))
})
# Create a dataset with a normal distribution
set.seed(123)  # Setting seed for reproducibility
data <- rnorm(1000, mean = 50, sd = 10)  # Mean = 50, Standard Deviation = 10
# Calculate quartiles
q1 <- quantile(data, 0.25)
q3 <- quantile(data, 0.75)
# Calculate mode
mode <- as.numeric(names(sort(table(data), decreasing = TRUE)[1]))
# Calculate range
range_data <- range(data)
# Calculate variance
variance <- var(data)
# Calculate mean and median for different standard deviations
std_dev_values <- c(5, 10, 15, 50, 100)
result <- data.frame(StandardDeviation = std_dev_values)
result["Mean"] <- sapply(std_dev_values, function(sd_value) {
data <- rnorm(1000, mean = 50, sd = sd_value)
return(mean(data))
})
result$Median <- sapply(std_dev_values, function(sd_value) {
data <- rnorm(1000, mean = 50, sd = sd_value)
return(median(data))
})
# Display the results
cat("Quartile 1:", q1, "\n")
cat("Quartile 3:", q3, "\n")
cat("Mode:", mode, "\n")
cat("Range:", range_data, "\n")
cat("Variance:", variance, "\n")
cat("Mean and Median for Different Standard Deviations:\n")
print(result)
